{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Charts/Charts.jsx","components/CountryPickers/CountryPickers.jsx","components/Footerbar/Footerbar.jsx","App.jsx","serviceWorker.js","index.js","App.module.css","components/Charts/Charts.module.css","components/Footerbar/Footerbar.module.css","components/CountryPickers/CountryPickers.module.css","img/img1.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","console","log","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Charts","fetchedCountries","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","backgroundColor","fill","options","legend","display","title","text","fontColor","maintainAspectRatio","responsive","barChart1","barChart","container1","CountryPickers","handleCountryChange","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","Footerbar","footer","App","state","fetchedData","setState","this","image","src","coronaImg","alt","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.76d0a2e7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__aeBSo\",\"card\":\"Cards_card__1n02C\",\"infected\":\"Cards_infected__2yOq1\",\"recovered\":\"Cards_recovered__3nE4u\",\"deaths\":\"Cards_deaths__3werw\"};","import React from 'react';\r\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\r\nimport styles from './Cards.module.css';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\n\r\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\r\n    // console.log(props);\r\n    if (!confirmed) {\r\n        return 'Loading....';\r\n    }\r\n    return (\r\n        <div className={styles.container}>\r\n            <Grid container spacing={3} justify=\"center\">\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\r\n                        <Typography variant=\"h4\">\r\n                            <CountUp start={0} end={confirmed.value} duration={2.5} separator=\",\" />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of Infected cases of COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\r\n                        <Typography variant=\"h4\">\r\n                            <CountUp start={0} end={recovered.value} duration={2.5} separator=\",\" />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of Recovered cases from COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\r\n                        <Typography variant=\"h4\">\r\n                            <CountUp start={0} end={deaths.value} duration={2.5} separator=\",\" />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of Deaths cases by COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards;","import axios from 'axios'; // this is used for api request\r\n\r\nconst url = 'https://covid19.mathdro.id/api';\r\n\r\nexport const fetchData = async(country) => {\r\n    let changeableUrl = url;\r\n\r\n    if (country) {\r\n        changeableUrl = `${url}/countries/${country}`;\r\n    }\r\n\r\n    try {\r\n        const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(changeableUrl);\r\n        return { confirmed, recovered, deaths, lastUpdate, };\r\n        // console.log(response);\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const fetchDailyData = async() => {\r\n    try {\r\n        const { data } = await axios.get(`${url}/daily`);\r\n\r\n        const modifiedData = data.map((dailyData) => ({\r\n            confirmed: dailyData.confirmed.total,\r\n            recovered: dailyData.recovered.total,\r\n            deaths: dailyData.deaths.total,\r\n            date: dailyData.reportDate,\r\n        }));\r\n\r\n        return modifiedData;\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\n\r\nexport const fetchCountries = async() => {\r\n    try {\r\n        const { data: { countries } } = await axios.get(`${url}/countries`);\r\n        return countries.map((country) => country.name);\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport { fetchDailyData } from \"../../api\";\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\nimport styles from \"./Charts.module.css\";\r\n// import { fetchCountries } from \"../../api\";\r\n\r\nconst Charts = ({\r\n  data: { confirmed, recovered, deaths, fetchedCountries },\r\n  country,\r\n}) => {\r\n  const [dailyData, setDailyData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setDailyData(await fetchDailyData());\r\n    };\r\n    console.log(dailyData);\r\n    fetchAPI();\r\n  }, [dailyData]);\r\n\r\n  const lineChart = dailyData.length ? (\r\n    <Line\r\n      data={{\r\n        labels: dailyData.map(({ date }) => date),\r\n        datasets: [\r\n          {\r\n            data: dailyData.map(({ confirmed }) => confirmed),\r\n            label: \"Infected\",\r\n            borderColor: \"rgb(0, 138, 230)\",\r\n            backgroundColor: \"rgb(0, 153, 255, 0.5)\",\r\n            fill: true,\r\n          },\r\n          {\r\n            data: dailyData.map(({ recovered }) => recovered),\r\n            label: \"Recovered\",\r\n            borderColor: \"rgb( 0, 204, 0)\",\r\n            backgroundColor: \"rgb( 0, 204, 0, 0.2)\",\r\n            fill: true,\r\n          },\r\n          {\r\n            data: dailyData.map(({ deaths }) => deaths),\r\n            label: \"Deaths\",\r\n            borderColor: \"rgb( 255, 0, 0)\",\r\n            backgroundColor: \"rgb(255, 0, 0, 0.5)\",\r\n            fill: true,\r\n          },\r\n        ],\r\n      }}\r\n      options={{\r\n        legend: { display: true },\r\n        title: { display: true, text: `Status of COVID-19 All Over the World`, fontColor: \"black\", },\r\n        maintainAspectRatio:false,\r\n        responsive:true,\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n\r\n  const barChart1 = dailyData.length ? (\r\n    <Bar\r\n      data={{\r\n        labels: dailyData.map(({ date }) => date),\r\n        datasets: [\r\n          {\r\n            data: dailyData.map(({ confirmed }) => confirmed),\r\n            label: \"Infected\",\r\n            borderColor: \"rgb( 0, 0, 255)\",\r\n            backgroundColor: \"rgb(0, 0, 255, 0.5)\",\r\n            fill: true,\r\n          },\r\n          {\r\n            data: dailyData.map(({ recovered }) => recovered),\r\n            label: \"Recovered\",\r\n            borderColor: \"rgb( 0, 255, 0)\",\r\n            backgroundColor: \"rgb( 0, 255, 0, 0.2)\",\r\n            fill: true,\r\n          },\r\n          {\r\n            data: dailyData.map(({ deaths }) => deaths),\r\n            label: \"Deaths\",\r\n            borderColor: \"rgb( 255, 0, 0)\",\r\n            backgroundColor: \"rgb(255, 0, 0, 0.5)\",\r\n            fill: true,\r\n          },\r\n        ],\r\n      }}\r\n      options={{\r\n        legend: { display: true },\r\n        title: { display: true, text: `Status of COVID-19 All Over the World`, fontColor: \"black\", },\r\n        maintainAspectRatio:false,\r\n        responsive:true,\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  // const barChart1 = dailyData.length ? (\r\n  //   <Bar\r\n  //     data={{\r\n  //       labels: dailyData.map(({ date }) => date),\r\n  //       datasets: [\r\n  //         {\r\n  //           label: \"People\",\r\n  //           backgroundColor: [\r\n  //             \"rgba(0, 0, 255, 0.6)\",\r\n  //             \"rgba(0, 255, 0, 0.6)\",\r\n  //             \"rgba(255, 0, 0, 0.6)\",\r\n  //           ],\r\n  //           data: [confirmed.value, recovered.value, deaths.value],\r\n  //         },\r\n  //       ],\r\n  //     }}\r\n  //     options={{\r\n  //       legend: { display: false },\r\n  //       title: { display: true, text: `Bar graph Representaion` },\r\n  //     }}\r\n  //   />\r\n  // ) : null;\r\n\r\n  //below is for bar chart code\r\n\r\n  const barChart = confirmed ? (\r\n    <Bar\r\n      data={{\r\n        labels: [\"Infected\", \"Recovered\", \"Deaths\"],\r\n        datasets: [\r\n          {\r\n            label: \"People\",\r\n            backgroundColor: [\r\n              \"rgb(0, 138, 230, 0.6)\",\r\n              \"rgb( 0, 255, 0, 0.6)\",\r\n              \"rgb(255, 0, 0, 0.6)\",\r\n            ],\r\n            data: [confirmed.value, recovered.value, deaths.value],\r\n          },\r\n        ],\r\n      }}\r\n      options={{\r\n        legend: { display: false },\r\n        title: { display: true, text: `Current Status in ${country}`, fontColor: \"black\", },\r\n        maintainAspectRatio:false,\r\n        responsive:true,\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      {country ? barChart : lineChart}\r\n      <div className={styles.container1}>{country ? lineChart : barChart1}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Charts;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { NativeSelect, FormControl } from '@material-ui/core';\r\nimport styles from './CountryPickers.module.css';\r\nimport { fetchCountries } from '../../api';\r\n\r\nconst CountryPickers = ({ handleCountryChange }) => {\r\n    const [fetchedCountries, setFetchedCountries] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n            setFetchedCountries(await fetchCountries());\r\n        }\r\n        fetchAPI();\r\n    }, [setFetchedCountries]);\r\n    // console.log(fetchedCountries);\r\n\r\n    return (\r\n        <FormControl className={styles.formControl}>\r\n            <NativeSelect defaultValue=\" \" onChange={(e) => handleCountryChange(e.target.value)}>\r\n                <option value=\"\">Global</option>\r\n                {fetchedCountries.map((country, i) => <option key={i} value={country}>{country}</option>)}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport default CountryPickers;","import React from 'react';\r\nimport styles from './Footerbar.module.css';\r\n\r\nconst Footerbar=()=>{\r\n    return(\r\n        <footer className={styles.container}>            \r\n            <div className={styles.footer}>\r\n               <h6>-- Created By Rahul Prasad --</h6> \r\n            </div>\r\n        </footer>\r\n    )\r\n};\r\n\r\nexport default Footerbar;","import React from 'react';\r\nimport styles from './App.module.css';\r\n\r\n// import Cards from './components/Cards/Cards';\r\n// import Charts from './components/Charts/Charts';\r\n// import CountryPickers from './components/CountryPickers/CountryPickers';\r\n// we write all above 3 import lines in single line as follows\r\n\r\nimport { Cards, Charts, CountryPickers } from './components';\r\nimport { fetchData } from './api';\r\nimport coronaImg from './img/img1.png';\r\nimport Footerbar from './components/Footerbar/Footerbar';\r\n\r\nclass App extends React.Component {\r\n\r\n  state = {\r\n    data: {},\r\n    country: '',\r\n  }\r\n\r\n  // below  is the best place to fetch the data from api under class based components\r\n  async componentDidMount() {\r\n    const fetchedData = await fetchData();\r\n\r\n    this.setState({ data: fetchedData });\r\n  }\r\n\r\n  handleCountryChange = async (country) => {\r\n    const fetchedData = await fetchData(country);\r\n\r\n    this.setState({ data: fetchedData, country: country });\r\n  }\r\n\r\n  render() {\r\n    const { data, country } = this.state\r\n\r\n    return (\r\n      <div className={styles.container}>\r\n        <Footerbar />\r\n        <img className={styles.image} src={coronaImg} alt=\"COVID-19\" />\r\n        <Cards data={data} />\r\n        <CountryPickers handleCountryChange={this.handleCountryChange} />\r\n        <Charts data={data} country={country} />        \r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__3uBN7\",\"image\":\"App_image__1b6VH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Charts_container__38rCK\",\"container1\":\"Charts_container1__3_RdI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Footerbar_container__15-sS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPickers_formControl__2nKJb\"};","module.exports = __webpack_public_path__ + \"static/media/img1.2a92a6c4.png\";"],"sourceRoot":""}